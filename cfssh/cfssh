#!/bin/bash
#
# Author: Jeffrey Cutter
# License: GPL v3
#
# Note: This program can enable you to do things faster, including mistakes, use at your own risk.
#

TAIL_NUMBER=3
NAME=$(basename $0)
DIR=$(dirname $0)
cfhosts_cmd="$DIR/cfhosts.rb"
cfhosts_file="$DIR/cfhosts"

groups=$($cfhosts_cmd $cfhosts_file list_groups)

function usage_common {
  echo "DESCRIPTION: $2"
  echo
  echo "USAGE: $NAME $1"
  echo
  shift 2
  if [ $# -ne 0 ]
  then
    echo "DETAILS:"
    echo
    for i in "$@"
    do
      echo "$i"
    done
    echo
  fi
}

function usage_case {
  echo "  -i is optional to ignore case with grep"
}

function usage_log_file {
  echo "  log_file is optional and defaults to automation.log"
  echo "    For CloudForms logs, log_file can be in the format of evm or evm.log"
  echo "    For any other files to grep, use /the/full/path/to/file"
}

function usage_pattern {
  echo "  pattern may be specified as a regex suitable for egrep taking care to prevent the shell from interpretation"
  if [[ "$NAME" == 'cftail' || "$NAME" == 'cftail-request' ]]
  then
    echo "  pattern may be specified as 'nogrep' to have no grep"
  fi
}

function usage_commas {
  echo "  commas in request_id will automatically be stripped"
}

function usage_tail {
  echo "  -l can be used to place output in separate window panes, by default output is merged"
}

function usage_help {
  echo "  -h | --help for this usage statement"
  echo
}

function usage_grep {
  USAGE=$1
  DESCRIPTION=$2
  shift 2
  usage_common "$USAGE" "$DESCRIPTION" "$(eval usage_case)" "$(eval usage_pattern)" "$(eval usage_log_file)" "$@"
}


function usage_request {
  USAGE=$1
  DESCRIPTION=$2
  shift 2
  usage_common "$USAGE" "$DESCRIPTION" "$(eval usage_commas)" "$(eval usage_log_file)" "$@"
}

function usage {
  echo
  case $NAME in
    "cfssh") usage_common "group command args" "ssh and run command with args" ;;
    "cfscp") usage_common "group local_file remote_dest_dir" "push files out using scp" "  Only one file is supported at a time" ;;
    "cfcollect") usage_common "group remote_file local_dest_dir" "pull files in using scp" "  Wildcards are accepted for remote_file but should only match one file" "  local_files are prepended with remote hostname" ;;
    "cfgrep") usage_grep "[-i] group pattern [log_file] [count]" "grep log_file for pattern and show last count number of lines" "  count is optional and used with tail to limit the output, default is $TAIL_NUMBER" "  If count is to be specified, log_file must also be specified" "  To show all lines specify count as 'all'";;
    "cfgrep-collate") usage_grep "[-i] group pattern [log_file]" "grep log_file for pattern and collate all results and display using less" ;;
    "cfgrep-request") usage_request "group request_id [log_file]" "grep log_file for request_id and all its associated tasks and collate all results and display with less" ;;
    "cftail") usage_grep "[-i] [-l] group pattern [log_file]" "multitail and grep pattern on specified group for specified log_file" "$(eval usage_tail)" ;;
    "cftail-request") usage_request "[-l] group request_id [log_file]" "multitail and grep request_id and all its associated tasks" "$(eval usage_tail)" ;;
  esac
  echo "AVAILABLE GROUPS:"
  echo
  for i in $groups
  do
    echo "  $i"
  done
  echo
  echo "To see matching hosts for a given group, use:"
  echo
  echo "$NAME <group> list"
  echo
  exit 1
}

function clean_tmp_file {
  rm -f $TMPFILE
}

trap clean_tmp_file EXIT

GREP="egrep"
L='L'

while getopts ilh OPT
do
  case $OPT in
    l) L='l' ;;
    i) GREP="$GREP -i" ;;
    *) usage ;;
  esac
done

shift $((OPTIND-1))

if [[ "$NAME" == "cfssh" || "$2" == "list" ]]
then
  if [ $# -lt 2 ]
  then
    echo
    echo "Not enough arguments!"
    usage
  fi
elif [ "$NAME" == "cfgrep" ]
then
  if [[ $# -ne 3 && $# -ne 4 ]]
  then
    echo
    echo "Wrong number of arguments!"
    usage
  fi
elif [[ "$NAME" == "cfgrep-request" || "$NAME" == "cftail" || $NAME == "cftail-request" ]]
then
  if [[ $# -ne 2 && $# -ne 3 ]]
  then
    echo
    echo "Wrong number of arguments!"
    usage
  fi
else
  if [ $# -ne 3 ]
  then
    echo
    echo "Wrong number of arguments!"
    usage
  fi
fi

group=$1
shift

if [ ! -r "$cfhosts_file" ]
then
  echo
  echo "$cfhosts_file not available!"
  usage
fi

if [ ! -x "$cfhosts_cmd" ]
then
  echo
  echo "$cfhosts_file not executable!"
  usage
fi

if [[ "$NAME" == 'cfgrep-request' || "$NAME" == 'cftail-request' ]]
then
  if [ ! -d '/var/www/miq/vmdb' ]
  then
    echo
    echo "ERROR: $NAME must be run from a CloudForms appliance!"
    echo
    exit 1
  fi
fi

if [[ "$NAME" == 'cftail' || "$NAME" == 'cftail-request' ]]
then
  which multitail > /dev/null 2>&1
  if [ $? -ne 0 ]
  then
    echo
    echo "ERROR: $NAME requires multitail be installed an in PATH!"
    echo
    exit 1
  fi
fi

# Check that we have a ruby available for cfhosts_cmd to use
/usr/bin/env ruby --version > /dev/null 2>&1
if [ $? -ne 0 ]
then
  echo
  echo "Unable to find ruby with /usr/bin/env ruby.  Please make sure ruby is installed."
  usage
fi

group_good=false

for i in $groups
do
  if [ "$i" == "$group" ]
  then
    group_good=true
  fi
done

if [ "$group_good" != "true" ]
then
  echo
  echo "Group $group not found in $cfhosts_file"
  usage
fi

echo

SERVERS=$($cfhosts_cmd $cfhosts_file list_servers $group)

if [ "$1" == "list" ]
then
  echo "Matching servers:"
  for i in $SERVERS
  do
    echo $i
  done
  exit
fi

if [[ "$NAME" == 'cfgrep' || "$NAME" == 'cfgrep-collate' || "$NAME" == 'cfgrep-request' || "$NAME" == 'cftail' || $NAME == 'cftail-request' ]]
then
  PATTERN="$1"
  if [[ "$NAME" == 'cfgrep-request' || $NAME == 'cftail-request' ]]
  then
    REQUEST_ID=$(echo $PATTERN | sed 's/,//g')
    echo "*** looking for tasks associated with request_id: $REQUEST_ID ***"
    cd /var/www/miq/vmdb
    TASK_IDS=$(echo "select id from miq_request_tasks where miq_request_id = $REQUEST_ID" | rails db | awk '$1!="id" && !/^---/ && !/^\(/ {print $1}' | sort -n)
    echo
    TASK_IDS=$(echo $TASK_IDS)
    cd - > /dev/null
    PATTERN="$REQUEST_ID|$(echo $TASK_IDS | sed 's/ /|/g')"
    echo "*** looking for request_id: $REQUEST_ID and task_ids: $TASK_IDS ***"
    echo
  fi
  PATTERN=$(echo $PATTERN | sed -e 's/|/\\|/g')
  LOG=$2
  if [ -z "$LOG" ]
  then
    LOG='automation.log'
  fi
  if [ "$(echo $LOG | cut -c1)" != "/" ]
  then
    LOG="/var/www/miq/vmdb/log/$(echo $LOG | sed 's/\.log$//').log"
  fi
  if [[ "$NAME" == 'cfgrep' ]]
  then
    if [ -n "$3" ]
    then
      if [ "$3" == 'all' ]
      then
        TAIL_NUMBER=999999999999999
      else
        TAIL_NUMBER=$3
      fi
    fi
    TAIL="tail -$TAIL_NUMBER"
  else
    TAIL="tail"
  fi
fi

ARGS=$*
ARGS=$(echo $ARGS | sed 's/*/\\*/g')

TMPFILE="/tmp/.$NAME.$$"
if [ -e "$TMPFILE" ]
then
  echo "TMPFILE $TMPFILE already exists!"
  exit 1
fi

if [[ "$NAME" != 'cftail' && "$NAME" != 'cftail-request' ]]
then
  
  for i in $SERVERS
  do
    echo "*** $i ***"
    case $NAME in
      "cfssh") ssh root@$i $ARGS ;;
      "cfscp") scp $1 root@$i:$2 ;;
      "cfcollect") scp root@$i:$1 $2/$(basename $1)-$i ;;
      "cfgrep") ssh root@$i $GREP "$PATTERN" $LOG \| $TAIL ;;
      "cfgrep-collate"|"cfgrep-request") ssh root@$i $GREP "$PATTERN" $LOG | sed -e "s/^/[$i] /" >> $TMPFILE ;;
    esac
    echo
  done

  if [[ "$NAME" == 'cfgrep-collate' || "$NAME" == 'cfgrep-request' ]]
  then
    echo "*** collating results ***"
    sort -k 4 $TMPFILE | less
    echo
  fi

else

  COMMAND='multitail'
  if [ "$PATTERN" == 'nogrep' ]
  then
    CLIENT_CMD="tail -f $LOG"
  else
    CLIENT_CMD="tail -f $LOG \| $GREP \\\"$PATTERN\\\""
  fi

  for i in $SERVERS
  do
    COMMAND="$COMMAND -$L \"ssh $i $CLIENT_CMD | sed -e 's/^/[$i] /'\""
  done

  echo "Running: $COMMAND"

  eval $COMMAND

fi
