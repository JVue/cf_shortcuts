#!/bin/bash

# Configuration Variables.

CONFIG_FILE="$(dirname $(readlink $0))/.config"
source $CONFIG_FILE

# Usage

NAME=$(basename $0)
function usage {
  echo
  echo "Usage: $NAME ## purpose [vmdb_host]"
  echo "  ## is a number for cfme name found in hosts file."
  echo "  purpose is a one word name to remember this appliance by."
  echo "  vmdb_host is the VMDB host to connect to or no_config to skip database configuration, if not specified the VMDB will be local."
  echo
  exit 1
}
if [ -z "$1" ]
then
  usage
fi

if [ -z "$2" ]
then
  usage
fi

if [ -n "$3" ]
then
  VMDB="$3"
fi

which tcping > /dev/null 2>&1
if [ $? -ne 0 ]
then
  echo "tcping not found, please install and try again."
  exit 1
fi

# Derived Variables.

CFME="$HOSTNAME_PREFIX$1"
CFME_IMG_PATH="$CFME_IMG_LOCATION/$CFME_IMG_FILE"
PURPOSE=$2
DEST_NAME="${CFME}_${PURPOSE}"
IP=$(getent hosts $CFME | awk '{print $1}')
if [ -r "$WORKDIR/network" ]
then
  NETWORK=$(cat $WORKDIR/network)
else
  echo "$WORKDIR/network does not exist!"
  echo "Please populate $WORKDIR/network with the key=value pair that is passed to virt-install --network"
  exit 1
fi

# Main.

export LIBGUESTFS_BACKEND=direct

if [ -z "$IP" ]
then
  echo "$CFME not found in DNS or /etc/hosts."
  exit 1
fi

sed -e "s/^IPADDR=.*/IPADDR=$IP/" $WORKDIR/ifcfg-eth0 > $WORKDIR/ifcfg-eth0-$CFME \
&& \
sudo cp -iv $CFME_IMG_PATH /var/lib/libvirt/images/$DEST_NAME.qcow2 \
&& \
sudo qemu-img create -f qcow2 /var/lib/libvirt/images/${DEST_NAME}_db.qcow2 40G \
&& \
sudo virt-customize -a \
/var/lib/libvirt/images/$DEST_NAME.qcow2 \
--hostname $CFME \
--touch /.autorelabel \
--run-command '/bin/yum -y remove cloud-init' \
--upload $WORKDIR/ifcfg-eth0-$CFME:/etc/sysconfig/network-scripts/ifcfg-eth0 \
--mkdir /root/.ssh \
--upload $WORKDIR/authorized_keys:/root/.ssh/authorized_keys \
--upload $WORKDIR/.bashrc:/root/.bashrc \
--upload $WORKDIR/.inputrc:/root/.inputrc \
--upload $WORKDIR/.irbrc:/root/.irbrc \
--upload $WORKDIR/.vimrc:/root/.vimrc \
&& \
rm -f $WORKDIR/ifcfg-eth0-$CFME \
&& \
sudo /usr/bin/virt-install \
--disk path=/var/lib/libvirt/images/$DEST_NAME.qcow2 \
--disk path=/var/lib/libvirt/images/${DEST_NAME}_db.qcow2 \
--import \
--network $NETWORK \
--name $DEST_NAME \
--cpu host \
--vcpus $CPUCOUNT \
--ram $MEMORY_MB \
--os-type=linux \
--os-variant=rhel7 \
--noautoconsole \
&& \
(
  # Wait for SSH port to be open.
  ALIVE=false
  until [ $ALIVE == "true" ]
  do
    sleep 10
    tcping $CFME 22 > /dev/null 2>&1
    if [ $? -eq 0 ]
    then
      echo "$CFME port 22 open."
      ALIVE=true
      sleep 5
    else
      echo "$CFME port 22 closed."
    fi
  done
) && \
(
ssh-keygen -R $CFME > /dev/null 2>&1
ssh-copy-id -o StrictHostKeyChecking=no root@$CFME
if [[ -z "$VMDB" && "$VMDB" != 'no_config' ]]
then
  ssh -o StrictHostKeyChecking=no -t root@$CFME appliance_console_cli --region=$1 --internal --password=smartvm --key --dbdisk=/dev/vdb
  sleep 5
  ssh root@$CFME systemctl start evmserverd
elif [ "$VMDB" == "no_config" ]
then
  echo "Skipping database configuration."
else
  ssh -o StrictHostKeyChecking=no -t root@$CFME appliance_console_cli --hostname=$VMDB  --password=smartvm --fetch-key=$VMDB --sshpassword=smartvm \; systemctl start evmserverd
fi
ssh root@$CFME -t git clone https://github.com/jeffmcutter/cf_shortcuts.git \&\& mkdir bin \&\& ln -s /root/cf_shortcuts/check_ui bin/check_ui \&\& echo "export PATH=\\\$PATH:/var/www/miq/vmdb/tools/miqssh" \>\> .bash_profile
)
