#!/bin/bash

# Configuration Variables.

HOSTNAME_PREFIX="cfme"
#CFME_IMG_FILE="cfme-rhos-5.6.2.2-1.x86_64.qcow2"
#CFME_IMG_FILE="cfme-rhos-5.7.0.17-1.x86_64.qcow2"
CFME_IMG_FILE="cfme-rhos-5.7.1.3-1.x86_64.qcow2"
CFME_IMG_LOCATION="$HOME/media"
WORKDIR="$HOME/work/cfme_kvm_deploy"
CPUCOUNT=4
MEMORY_MB=6144

# Usage

NAME=$(basename $0)
function usage {
  echo
  echo "Usage: $NAME ## purpose"
  echo "  ## is a number for cfme name found in hosts file."
  echo "  purpose is a one word name to remember this appliance by."
  echo
  exit 1
}
if [ -z "$1" ]
then
  usage
fi

if [ -z "$2" ]
then
  usage
fi

which tcping > /dev/null 2>&1
if [ $? -ne 0 ]
then
  echo "tcping not found, please install and try again."
  exit 1
fi

# Derived Variables.

CFME="$HOSTNAME_PREFIX$1"
CFME_IMG_PATH="$CFME_IMG_LOCATION/$CFME_IMG_FILE"
PURPOSE=$2
IP=$(getent hosts $CFME | awk '{print $1}')
if [ -r "$WORKDIR/network" ]
then
  NETWORK=$(cat $WORKDIR/network)
else
  echo "$WORKDIR/network does not exist!"
  echo "Please populate $WORKDIR/network with the key=value pair that is passed to virt-install --network"
  exit 1
fi

# Main.

export LIBGUESTFS_BACKEND=direct

if [ -z "$IP" ]
then
  echo "$CFME not found in DNS or /etc/hosts."
  exit 1
fi

sed -i -e "s/^IPADDR=.*/IPADDR=$IP/" $WORKDIR/ifcfg-eth0 \
&& \
sudo cp -iv $CFME_IMG_PATH /var/lib/libvirt/images/$CFME.qcow2 \
&& \
sudo qemu-img create -f qcow2 /var/lib/libvirt/images/${CFME}_db.qcow2 40G \
&& \
sudo virt-customize -a \
/var/lib/libvirt/images/$CFME.qcow2 \
--hostname $CFME \
--upload $WORKDIR/ifcfg-eth0:/etc/sysconfig/network-scripts/ifcfg-eth0 \
--mkdir /root/.ssh \
--upload $WORKDIR/authorized_keys:/root/.ssh/authorized_keys \
--upload $WORKDIR/.bashrc:/root/.bashrc \
--upload $WORKDIR/.inputrc:/root/.inputrc \
--upload $WORKDIR/.irbrc:/root/.irbrc \
--upload $WORKDIR/.vimrc:/root/.vimrc \
&& \
sudo /usr/bin/virt-install \
--disk path=/var/lib/libvirt/images/$CFME.qcow2 \
--disk path=/var/lib/libvirt/images/${CFME}_db.qcow2 \
--import \
--network $NETWORK \
--name ${CFME}_${PURPOSE} \
--cpu host \
--vcpus $CPUCOUNT \
--ram $MEMORY_MB \
--os-type=linux \
--os-variant=rhel7 \
--noautoconsole \
&& \
(
  # Wait for SSH port to be open.
  ALIVE=false
  until [ $ALIVE == "true" ]
  do
    sleep 10
    tcping $CFME 22 > /dev/null 2>&1
    if [ $? -eq 0 ]
    then
      echo "$CFME port 22 open."
      ALIVE=true
      sleep 5
    else
      echo "$CFME port 22 closed."
    fi
  done
) && \
(
ssh-keygen -R $CFME > /dev/null 2>&1
ssh -o StrictHostKeyChecking=no -t root@$CFME appliance_console_cli --region=1 --internal --password=smartvm --key --dbdisk=/dev/vdb
sleep 5
ssh root@$CFME systemctl start evmserverd
)
